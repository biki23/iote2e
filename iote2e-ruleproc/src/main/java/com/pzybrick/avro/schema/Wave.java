/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.pzybrick.avro.schema;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Wave extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6725879029682032048L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Wave\",\"namespace\":\"com.pzybrick.avro.schema\",\"fields\":[{\"name\":\"source_uuid\",\"type\":\"string\"},{\"name\":\"wave_type\",\"type\":\"string\"},{\"name\":\"wave_value\",\"type\":\"double\"},{\"name\":\"ts_epoch\",\"type\":\"long\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence source_uuid;
  @Deprecated public java.lang.CharSequence wave_type;
  @Deprecated public double wave_value;
  @Deprecated public long ts_epoch;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Wave() {}

  /**
   * All-args constructor.
   * @param source_uuid The new value for source_uuid
   * @param wave_type The new value for wave_type
   * @param wave_value The new value for wave_value
   * @param ts_epoch The new value for ts_epoch
   */
  public Wave(java.lang.CharSequence source_uuid, java.lang.CharSequence wave_type, java.lang.Double wave_value, java.lang.Long ts_epoch) {
    this.source_uuid = source_uuid;
    this.wave_type = wave_type;
    this.wave_value = wave_value;
    this.ts_epoch = ts_epoch;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return source_uuid;
    case 1: return wave_type;
    case 2: return wave_value;
    case 3: return ts_epoch;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: source_uuid = (java.lang.CharSequence)value$; break;
    case 1: wave_type = (java.lang.CharSequence)value$; break;
    case 2: wave_value = (java.lang.Double)value$; break;
    case 3: ts_epoch = (java.lang.Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'source_uuid' field.
   * @return The value of the 'source_uuid' field.
   */
  public java.lang.CharSequence getSourceUuid() {
    return source_uuid;
  }

  /**
   * Sets the value of the 'source_uuid' field.
   * @param value the value to set.
   */
  public void setSourceUuid(java.lang.CharSequence value) {
    this.source_uuid = value;
  }

  /**
   * Gets the value of the 'wave_type' field.
   * @return The value of the 'wave_type' field.
   */
  public java.lang.CharSequence getWaveType() {
    return wave_type;
  }

  /**
   * Sets the value of the 'wave_type' field.
   * @param value the value to set.
   */
  public void setWaveType(java.lang.CharSequence value) {
    this.wave_type = value;
  }

  /**
   * Gets the value of the 'wave_value' field.
   * @return The value of the 'wave_value' field.
   */
  public java.lang.Double getWaveValue() {
    return wave_value;
  }

  /**
   * Sets the value of the 'wave_value' field.
   * @param value the value to set.
   */
  public void setWaveValue(java.lang.Double value) {
    this.wave_value = value;
  }

  /**
   * Gets the value of the 'ts_epoch' field.
   * @return The value of the 'ts_epoch' field.
   */
  public java.lang.Long getTsEpoch() {
    return ts_epoch;
  }

  /**
   * Sets the value of the 'ts_epoch' field.
   * @param value the value to set.
   */
  public void setTsEpoch(java.lang.Long value) {
    this.ts_epoch = value;
  }

  /**
   * Creates a new Wave RecordBuilder.
   * @return A new Wave RecordBuilder
   */
  public static com.pzybrick.avro.schema.Wave.Builder newBuilder() {
    return new com.pzybrick.avro.schema.Wave.Builder();
  }

  /**
   * Creates a new Wave RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Wave RecordBuilder
   */
  public static com.pzybrick.avro.schema.Wave.Builder newBuilder(com.pzybrick.avro.schema.Wave.Builder other) {
    return new com.pzybrick.avro.schema.Wave.Builder(other);
  }

  /**
   * Creates a new Wave RecordBuilder by copying an existing Wave instance.
   * @param other The existing instance to copy.
   * @return A new Wave RecordBuilder
   */
  public static com.pzybrick.avro.schema.Wave.Builder newBuilder(com.pzybrick.avro.schema.Wave other) {
    return new com.pzybrick.avro.schema.Wave.Builder(other);
  }

  /**
   * RecordBuilder for Wave instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Wave>
    implements org.apache.avro.data.RecordBuilder<Wave> {

    private java.lang.CharSequence source_uuid;
    private java.lang.CharSequence wave_type;
    private double wave_value;
    private long ts_epoch;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.pzybrick.avro.schema.Wave.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.source_uuid)) {
        this.source_uuid = data().deepCopy(fields()[0].schema(), other.source_uuid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.wave_type)) {
        this.wave_type = data().deepCopy(fields()[1].schema(), other.wave_type);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.wave_value)) {
        this.wave_value = data().deepCopy(fields()[2].schema(), other.wave_value);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.ts_epoch)) {
        this.ts_epoch = data().deepCopy(fields()[3].schema(), other.ts_epoch);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Wave instance
     * @param other The existing instance to copy.
     */
    private Builder(com.pzybrick.avro.schema.Wave other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.source_uuid)) {
        this.source_uuid = data().deepCopy(fields()[0].schema(), other.source_uuid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.wave_type)) {
        this.wave_type = data().deepCopy(fields()[1].schema(), other.wave_type);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.wave_value)) {
        this.wave_value = data().deepCopy(fields()[2].schema(), other.wave_value);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.ts_epoch)) {
        this.ts_epoch = data().deepCopy(fields()[3].schema(), other.ts_epoch);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'source_uuid' field.
      * @return The value.
      */
    public java.lang.CharSequence getSourceUuid() {
      return source_uuid;
    }

    /**
      * Sets the value of the 'source_uuid' field.
      * @param value The value of 'source_uuid'.
      * @return This builder.
      */
    public com.pzybrick.avro.schema.Wave.Builder setSourceUuid(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.source_uuid = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'source_uuid' field has been set.
      * @return True if the 'source_uuid' field has been set, false otherwise.
      */
    public boolean hasSourceUuid() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'source_uuid' field.
      * @return This builder.
      */
    public com.pzybrick.avro.schema.Wave.Builder clearSourceUuid() {
      source_uuid = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'wave_type' field.
      * @return The value.
      */
    public java.lang.CharSequence getWaveType() {
      return wave_type;
    }

    /**
      * Sets the value of the 'wave_type' field.
      * @param value The value of 'wave_type'.
      * @return This builder.
      */
    public com.pzybrick.avro.schema.Wave.Builder setWaveType(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.wave_type = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'wave_type' field has been set.
      * @return True if the 'wave_type' field has been set, false otherwise.
      */
    public boolean hasWaveType() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'wave_type' field.
      * @return This builder.
      */
    public com.pzybrick.avro.schema.Wave.Builder clearWaveType() {
      wave_type = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'wave_value' field.
      * @return The value.
      */
    public java.lang.Double getWaveValue() {
      return wave_value;
    }

    /**
      * Sets the value of the 'wave_value' field.
      * @param value The value of 'wave_value'.
      * @return This builder.
      */
    public com.pzybrick.avro.schema.Wave.Builder setWaveValue(double value) {
      validate(fields()[2], value);
      this.wave_value = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'wave_value' field has been set.
      * @return True if the 'wave_value' field has been set, false otherwise.
      */
    public boolean hasWaveValue() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'wave_value' field.
      * @return This builder.
      */
    public com.pzybrick.avro.schema.Wave.Builder clearWaveValue() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'ts_epoch' field.
      * @return The value.
      */
    public java.lang.Long getTsEpoch() {
      return ts_epoch;
    }

    /**
      * Sets the value of the 'ts_epoch' field.
      * @param value The value of 'ts_epoch'.
      * @return This builder.
      */
    public com.pzybrick.avro.schema.Wave.Builder setTsEpoch(long value) {
      validate(fields()[3], value);
      this.ts_epoch = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'ts_epoch' field has been set.
      * @return True if the 'ts_epoch' field has been set, false otherwise.
      */
    public boolean hasTsEpoch() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'ts_epoch' field.
      * @return This builder.
      */
    public com.pzybrick.avro.schema.Wave.Builder clearTsEpoch() {
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public Wave build() {
      try {
        Wave record = new Wave();
        record.source_uuid = fieldSetFlags()[0] ? this.source_uuid : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.wave_type = fieldSetFlags()[1] ? this.wave_type : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.wave_value = fieldSetFlags()[2] ? this.wave_value : (java.lang.Double) defaultValue(fields()[2]);
        record.ts_epoch = fieldSetFlags()[3] ? this.ts_epoch : (java.lang.Long) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
